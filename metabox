#!/bin/bash

readonly HASHED_DIR="archives"
readonly BACKUP_DIR="data"
readonly RECORDS_DB="versions.txt"

readonly AWS_CLI="docker run --rm -v $(pwd):/app --env-file .env -it amazon/aws-cli:latest"

# Set overrideable s3 destinations.
AWS_S3_BUCKET="default"
AWS_S3_PREFIX="prefix"
set -a; source .env; set +a

function upload_to_s3() {
    $AWS_CLI s3 cp "/app/$HASHED_DIR/$1.tar.gz" "s3://$AWS_S3_BUCKET/$AWS_S3_PREFIX/"
}

function download_from_s3() {
    $AWS_CLI s3 cp "s3://$AWS_S3_BUCKET/$AWS_S3_PREFIX/$1.tar.gz" "/app/$HASHED_DIR/$1.tar.gz"
}

# RECORD struct
#   hash        (hash ./target)
#   timestamp   (date +%s)
#   creator     (git config --global user.email)
#   tags        (<comma-delimited array of strings>)
#
# For example,
# 67dc74329181f3aaf1d304a4fc40c01c 1588448900 nmcapule@gmail.com development,master

function record_exists() {
    local sum=$1
    return $(grep -q "^$sum " $RECORDS_DB)
}
function record_retrieve() {
    local sum=$1
    echo $(grep "^$sum " $RECORDS_DB)
}
function record_create() {
    record_exists "$1" && echo "Record already exists: $1" && exit
    echo "$1 $2 $3 $4" >> $RECORDS_DB
}
function record_get_tags() {
    # Converts comma into space, then let default IFS convert the
    # 4th parameter into an array.
    echo ${4//,/ }
}
function record_print() {
    echo "$1"
    if [ "$(uname)" == "Darwin" ]; then
        echo "    created:    $(date -d $2)"
    else
        echo "    created:    $(date -d @$2)"
    fi
    echo "    creator:    $3"

    local tags=($(record_get_tags $@))
    echo "    tags:       (${tags[*]})"
}
function array_contains () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}
function print_all_records() {
    while read line; do
        record_print $line
    done <$RECORDS_DB
}
function latest_record_with_tag() {
    local record=""
    while read line; do
        local tags=$(record_get_tags $line)
        array_contains "$1" $tags && record=$line
    done <$RECORDS_DB
    if [ -z "$record" ]; then
        return 1
    fi
    echo $record
}
function tag_record() {
    local record=$(record_retrieve "$1")
    if [ -z "$record" ]; then
        echo "Record does not exist: $1"
        exit 1
    fi

    local tags=($(record_get_tags $record))
    array_contains "$2" ${tags[*]}
    if [ "$?" -eq 0 ]; then
        echo "Record already has tag: $2"
        exit 1
    fi

    local prev_tags=$(local IFS=, ; echo "${tags[*]}")
    local appended=(${tags[*]})
    appended+=($2)
    local next_tags=$(local IFS=, ; echo "${appended[*]}")

    sed -ri "s/^($1.+)$prev_tags$/\1$next_tags/g" $RECORDS_DB
}
function untag_record() {
    local record=$(record_retrieve "$1")
    if [ -z "$record" ]; then
        echo "Record does not exist: $1"
        exit 1
    fi

    local tags=($(record_get_tags $record))
    array_contains "$2" ${tags[*]}
    if ! [ "$?" -eq 0 ]; then
        echo "Record doesn't have tag: $2"
        exit 1
    fi

    local prev_tags=$(local IFS=, ; echo "${tags[*]}")
    local array=()
    for value in "${tags[@]}"; do
        [[ $value != $2 ]] && array+=($value)
    done
    local next_tags=$(local IFS=, ; echo "${array[*]}")

    sed -ri "s/^($1.+)$prev_tags$/\1$next_tags/g" $RECORDS_DB
}

function hash() {
    local hasher=md5sum
    # Handle MacOS using md5 insted of md5sum.
    if [ "$(uname)" == "Darwin" ]; then
        hasher=md5
    fi

    local target=${1:-$(pwd)}
    if ! [ -d "$target" ]; then
        echo "Unknown folder: $target"
        exit 1
    fi

    pushd $(pwd) > /dev/null
    cd $target

    local sum=`{
        export LC_ALL=C;
        # echo $target;
        find -type f -exec wc -c {} \; | sort; echo;
        find -type f -exec $hasher {} + | sort; echo;
        find . -type d | sort; find . -type d | sort | $hasher;
    } | $hasher | awk -F" " '{ print $1 }'`
 
    popd > /dev/null

    echo $sum
}

function archive() {
    local target=${1:-$(pwd)}
    if ! [ -d "$target" ]; then
        echo "Unknown folder: $target"
        exit 1
    fi

    local sum=$(hash $target)
    mkdir -p $HASHED_DIR
    
    tar cvzf "$HASHED_DIR/$sum.tar.gz" $target
    record_create $sum $(date +%s) $(git config --global user.email) $2

    echo $sum
}

function unarchive() {
    local sum="$1"
    local filename="$HASHED_DIR/$sum.tar.gz"
    if ! [ -f "$filename" ]; then
        echo "File not found: $filename"
        exit 1
    fi

    if ! [ -z $2 ]; then
        rm -rf "$BACKUP_DIR/$2"
        mkdir -p "$BACKUP_DIR/$2"
        tar xzf "$filename" -C "$BACKUP_DIR/$2" --strip-components 1
    else
        mkdir -p $BACKUP_DIR
        tar xzf "$filename" -C "$BACKUP_DIR"
    fi

    echo $sum
}

# Setup.
touch $RECORDS_DB

# Get command.
CMD=$1
shift

# Select command.
case $CMD in
    "hash")
        hash $@
        ;;
    "arc")
        archive $@
        ;;
    "unarc"|"dearc")
        unarchive $@
        ;;
    "push")
        archive $@ && upload_to_s3 $(hash $1)
        ;;
    "pull")
        download_from_s3 $1 && unarchive $@
        ;;
    "list")
        # print all from RECORDS_DB
        print_all_records
        ;;
    "tagged")
        record=$(latest_record_with_tag $1)
        if ! [ "$?" -eq 0 ]; then
            echo "No records with tag: $1"
            exit 1
        fi
        record_print $record
        ;;
    "tag")
        tag_record $1 $2
        ;;
    "untag"|"detag")
        untag_record $1 $2
        ;;
    *)
        echo "default"
        ;;
esac